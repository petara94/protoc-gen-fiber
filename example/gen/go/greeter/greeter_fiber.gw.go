// Code generated by protoc-gen-go-fiber. DO NOT EDIT.
// versions:
// 	protoc-gen-go-fiber v0.0.3
// 	protoc              (unknown)
// source: greeter/greeter.proto

package greeterpb

import (
	context "context"
	json "encoding/json"
	v2 "github.com/gofiber/fiber/v2"
	utils "github.com/petara94/protoc-gen-go-fiber/utils"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

type __GreeterService_FiberRouter struct {
	server      GreeterServiceServer
	interceptor grpc.UnaryServerInterceptor
}

func RegisterGreeterServiceFiberRoutes(app *v2.App, server GreeterServiceServer, interceptor grpc.UnaryServerInterceptor) {
	if server == nil {
		panic("register fiber router filed: server GreeterServiceServer is nil")
	}

	router := &__GreeterService_FiberRouter{
		server:      server,
		interceptor: interceptor,
	}

	app.Post("api/v1/hello", router.__GreeterService_SayHello_Route)
}

func (r *__GreeterService_FiberRouter) __GreeterService_SayHello_Route(c *v2.Ctx) error {
	ctx, cancel := context.WithCancel(c.Context())
	defer cancel()

	md := metadata.New(nil)
	c.Request().Header.VisitAll(func(key, value []byte) {
		md.Append(string(key), string(value))
	})

	ctx = metadata.NewIncomingContext(ctx, md)

	var req HelloRequest

	if err := json.Unmarshal(c.Body(), &req); err != nil {
		return utils.HandleUnmarshalError(c, err)
	}

	if err := req.Validate(); err != nil {
		return utils.HandleValidationError(c, err)
	}

	var (
		resp any
		err  error
	)
	if r.interceptor != nil {
		handler := func(ctx context.Context, req any) (any, error) {
			return r.server.SayHello(ctx, req.(*HelloRequest))
		}
		info := &grpc.UnaryServerInfo{
			Server:     r.server,
			FullMethod: GreeterService_SayHello_FullMethodName,
		}

		resp, err = r.interceptor(ctx, &req, info, handler)
	} else {
		resp, err = r.server.SayHello(ctx, &req)
	}
	if err != nil {
		return utils.HandleGRPCStatusError(c, err)
	}

	return c.JSON(resp)
}
